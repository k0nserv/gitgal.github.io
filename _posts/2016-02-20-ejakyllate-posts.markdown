---
layout: post
title: "Ejakyllate posts"
date: 2016-02-20 18:25:12 +0100
categories: software perl
---

The reason
---

Something I noticed when I was creating this blog was that in the autogenerated post you got from running `jekyll new ./` from root project.

Was the following line:

> To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.

This made me cry a litle inside as it expected me to lookup todays date and then type<br />
`vim _posts/YYYY-MM-DD-name-of-post.markdown` every time I wanted to make 
a new post and then fill it with necessary header information.
Thats **a lot** of hard work.

Ejakyllate.pl
---

Perl to the resuce! I thought then rushed into vim.

`vim ejakyllate.pl`

{% highlight perl %}
#! /usr/bin/perl
#
# Program protocol
#
# [0] = Title of post as a literal string ex. 'Hello world'
# [0<] = Categories seperated by space ex. garbage idno
#
# Program execution: ./ejakyllate.pl 'Hello world' garbage idno
#
# Program spits out jakyll markdown files into directory _posts
#

use strict;
use warnings;

my $numberOfArguments = $#ARGV + 1;

if ($numberOfArguments < 1) {
	print "You do need a title\n";
	exit;
}
{% endhighlight %}

Good start. Have some documentation time for testing.<br />
`:w`<br />
`:q`<br />

<pre>
$ chmod 700 ejakyllate.pl
$ ./ejakyllate.pl
You do need a title
$ ./ejakyllate.pl 'Hello world'
$
</pre>

Hurray! Working as expected. Now I need to add post header info.

Header info in jakyll generated file:

> ---<br />
> layout: post<br />
> title: "Welcome to jekyll!"<br />
> date:  2016-02-20 18:27:09 +0100<br />
> categories: jekyll update<br />
> ---<br />

Ok! Seems easy enough.

{% highlight perl %}
#! /usr/bin/perl
#
# Program protocol
#
# [0] = Title of post as a literal string ex. 'Hello world'
# [0<] = Categories seperated by space ex. garbage idno
#
# Program execution: ./ejakyllate.pl 'Hello world' garbage idno
#
# Program spits out jakyll markdown files into directory _posts
#

use strict;
use warnings;

my $numberOfArguments = $#ARGV + 1;

if ($numberOfArguments < 1) {
	print "You do need a title\n";
	exit;
}

my ($title, @categories) = @ARGV;

print "---\n";
print "layout: post\n";
print "title: $title\n";
print "date: \n";
print "categories: @categories\n";
print "---\n";
{% endhighlight %}

<pre>
$ ./ejakyllate.pl 'Hello World' hello world
---
layout: post
title: Hello World
date: 
categories: hello world
---
$
</pre>

Good!
Now it is only date and output to file left.<br />
I am going to start with date and use [Time::Piece](https://metacpan.org/pod/Time::Piece) for it as it comes with Perl >= 5.9.5.

{% highlight perl %}
use strict;
use warnings;
use Time::Piece;

# --------------

my ($title, @categories) = @ARGV;
my $time = Time::Piece->new();
my $date = $time->strftime("%F %T %z");

print "---\n";
print "layout: post\n";
print "title: $title\n";
print "date: $date\n";
print "categories: @categories\n";
print "---\n";
{% endhighlight %}

<pre>
$ ./ejakyllate.pl 'Hello World' hello world
---
layout: post
title: Hello World
date: 2016-02-20 20:24:27 +0100
categories: hello world
---
$
</pre>

Only output to file left now super!

{% highlight perl %}
# --------------
my $date = $time->strftime("%F");
my $fullDate = $date.$time->strftime(" %T %z");

# lc turns string into lower case g stands for global and r is so
# that we don't manipulate $title.
my $filename = $date.'-'.(lc $title =~ s/ /-/gr).'.markdown';
my $postsDirectory = '_posts/';

open my $postFile, ">", $postsDirectory.$filename or die $!;

# This next part is easy to mass edit
# mark all print with v
# then :'<,'>:s: : $postFile :
# to add $postFile
print $postFile "---\n"; 
print $postFile "layout: post\n"; 
print $postFile "title: $title\n"; 
print $postFile "date: $fullDate\n"; 
print $postFile "categories: @categories\n";
print $postFile "---\n";

close $postFile or die $!;
{% endhighlight %}

<pre>
$ ./ejakyllate.pl 'Hello World' hello world
No such file or directory at ./ejakyllate.pl line 21. # >.< shit.
$ mkdir _posts
$ ./ejakyllate.pl 'Hello World' hello world
$ ls _posts/
2016-02-20-hello-world.markdown
$ cat _posts/2016-02-20-hello-world.markdown
---
layout: post
title: Hello World
date: 2016-02-20 20:44:33 +0100
categories: hello world
---
</pre>

Program complete.<br />
Now I just need to move it into `~/bin/` to make it usefull.

<pre>
$ mv ejakyllate.pl ~/bin/
$ cd dev/repos/gitgal.github.io
$ ejakyllate.pl Ejakyllate posts software perl
$ vim _posts/2016-02-20-ejakyllate-posts.markdown
</pre>

Conclusions
---

After writing this first real post I have made some observations about myself.
I seem to be better at writing code then text as most of this post is code and then some comment about what I was thinking.<br />
<br />
Also good reader I have chosen not to write about me search the internet for information as I think it would be boring to read about.<br />
Just keep in mind that I did not know all the things about perl that was needed for this program when I started @ARGV and [Time::Piece](https://metacpan.org/pod/Time::Piece) are two such examples.

Complete ejakyllate.pl
---

{% highlight perl %}
#! /usr/bin/perl
#
# Program protocol
#
# [0] = Title of post as a literal string ex. 'Hello world'
# [0<] = categories seperated by space ex. garbage idno
#
# program execution: ./ejakyllate.pl 'Hello world' garbage idno
#
# Program spits out jakyll markdown files in director _posts

use strict;
use warnings;
use Time::Piece;

my $numberOfArguments = $#ARGV + 1;

if ($numberOfArguments < 1) {
    print "You do need a title\n";
	exit;
}

my ($title, @categories) = @ARGV;

my $time = Time::Piece->new();
my $date = $time->strftime("%F");
my $fulldate = $date.$time->strftime(" %T %z");
my $filename = $date.'-'.(lc $title =~ s/ /-/gr).'.markdown';
my $postsDirectory = '_posts/';

open my $postFile, ">", $postsDirectory.$filename or die $!;

print $postFile "---\n";
print $postFile "layout: post\n";
print $postFile "title: \"$title\"\n";
print $postFile "date: $fulldate\n";
print $postFile "categories: @categories\n";
print $postFile "---\n";

close $postFile or die $!;
{% endhighlight %}
